"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/http");
require("rxjs/add/operator/catch");
require("rxjs/add/operator/map");
require("rxjs/add/operator/toPromise");
require("rxjs/add/observable/throw");
var Observable_1 = require("rxjs/Observable");
var BASE_API_URL = 'https://donna-backend.herokuapp.com/api/';
var BaseAPIDataService = (function () {
    function BaseAPIDataService(http) {
        this.http = http;
    }
    BaseAPIDataService.prototype.postData = function (path, form) {
        var headers = new http_1.Headers({
            'Content-Type': 'application/x-www-form-urlencoded'
        });
        var options = new http_1.RequestOptions({
            headers: headers
        });
        var body = '';
        for (var key in form) {
            if (form.hasOwnProperty(key)) {
                if (body !== '') {
                    body += '&';
                }
                body += key + '=' + form[key];
            }
        }
        return this.http.post(BASE_API_URL + path, body, options)
            .map(function (res) { return res.json(); }).catch(this.handleError);
    };
    BaseAPIDataService.prototype.getData = function (path, paramsMap) {
        var params = new http_1.URLSearchParams();
        for (var key in paramsMap) {
            if (paramsMap.hasOwnProperty(key)) {
                params.set(key, paramsMap[key]);
            }
        }
        console.log(BASE_API_URL + path);
        return this.http.get(BASE_API_URL + path, {
            search: params
        }).map(function (res) { return res.json(); })
            .catch(this.handleError);
    };
    BaseAPIDataService.prototype.deleteData = function (path, paramsMap) {
        var options = new http_1.RequestOptions({
            body: JSON.stringify(paramsMap)
        });
        console.log(BASE_API_URL + path);
        return this.http.delete(BASE_API_URL + path, options).map(function (res) { return res.json(); })
            .catch(this.handleError);
    };
    BaseAPIDataService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(error.json() || 'Server error');
    };
    return BaseAPIDataService;
}());
exports.BaseAPIDataService = BaseAPIDataService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1hcGktZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFzZS1hcGktZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esc0NBQXVGO0FBQ3ZGLG1DQUFpQztBQUNqQyxpQ0FBK0I7QUFDL0IsdUNBQXFDO0FBQ3JDLHFDQUFtQztBQUNuQyw4Q0FBNkM7QUFFN0MsSUFBTSxZQUFZLEdBQVksMENBQTBDLENBQUM7QUFDekU7SUFFRSw0QkFBb0IsSUFBUztRQUFULFNBQUksR0FBSixJQUFJLENBQUs7SUFBSSxDQUFDO0lBRWxDLHFDQUFRLEdBQVIsVUFBUyxJQUFXLEVBQUUsSUFBUTtRQUM1QixJQUFLLE9BQU8sR0FBRyxJQUFJLGNBQU8sQ0FBQztZQUN6QixjQUFjLEVBQUUsbUNBQW1DO1NBQ3BELENBQUMsQ0FBQztRQUNILElBQUksT0FBTyxHQUFHLElBQUkscUJBQWMsQ0FBQztZQUMvQixPQUFPLEVBQUUsT0FBTztTQUNqQixDQUFDLENBQUM7UUFDSCxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZCxHQUFHLENBQUEsQ0FBRSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixFQUFFLENBQUEsQ0FBQyxJQUFJLEtBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDZCxJQUFJLElBQUksR0FBRyxDQUFDO2dCQUNkLENBQUM7Z0JBQ0QsSUFBSSxJQUFHLEdBQUcsR0FBRSxHQUFHLEdBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLENBQUM7UUFDSCxDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQzthQUN4QyxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUcsT0FBQSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQVYsQ0FBVSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsb0NBQU8sR0FBUCxVQUFRLElBQVcsRUFBRSxTQUFhO1FBQ2hDLElBQUksTUFBTSxHQUFtQixJQUFJLHNCQUFlLEVBQUUsQ0FBQztRQUNuRCxHQUFHLENBQUEsQ0FBRSxJQUFJLEdBQUcsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEVBQUUsQ0FBQSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNsQyxDQUFDO1FBQ0gsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxFQUFFO1lBQ3RCLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBVixDQUFVLENBQUM7YUFDdEIsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsdUNBQVUsR0FBVixVQUFXLElBQVcsRUFBRSxTQUFhO1FBQ25DLElBQUksT0FBTyxHQUFHLElBQUkscUJBQWMsQ0FBQztZQUM3QixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7U0FDaEMsQ0FBQyxDQUFDO1FBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFWLENBQVUsQ0FBQzthQUN2RCxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDTyx3Q0FBVyxHQUFuQixVQUFvQixLQUFlO1FBQy9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsTUFBTSxDQUFDLHVCQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxjQUFjLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBQ0gseUJBQUM7QUFBRCxDQUFDLEFBbERELElBa0RDO0FBbERZLGdEQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtIdHRwLCBVUkxTZWFyY2hQYXJhbXMsIFJlc3BvbnNlLCBIZWFkZXJzLCBSZXF1ZXN0T3B0aW9uc30gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XHJcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvY2F0Y2gnO1xyXG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21hcCc7XHJcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvdG9Qcm9taXNlJztcclxuaW1wb3J0ICdyeGpzL2FkZC9vYnNlcnZhYmxlL3Rocm93JztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcblxyXG5jb25zdCBCQVNFX0FQSV9VUkwgOiBzdHJpbmcgPSAnaHR0cHM6Ly9kb25uYS1iYWNrZW5kLmhlcm9rdWFwcC5jb20vYXBpLyc7XHJcbmV4cG9ydCBjbGFzcyBCYXNlQVBJRGF0YVNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6SHR0cCkgeyB9XHJcblxyXG4gIHBvc3REYXRhKHBhdGg6c3RyaW5nLCBmb3JtOmFueSkge1xyXG4gICAgbGV0ICBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcclxuICAgIH0pO1xyXG4gICAgbGV0IG9wdGlvbnMgPSBuZXcgUmVxdWVzdE9wdGlvbnMoe1xyXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzXHJcbiAgICB9KTtcclxuICAgIGxldCBib2R5ID0gJyc7XHJcbiAgICBmb3IoIHZhciBrZXkgaW4gZm9ybSkge1xyXG4gICAgICBpZihmb3JtLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICBpZihib2R5IT09ICcnKSB7XHJcbiAgICAgICAgICBib2R5ICs9ICcmJztcclxuICAgICAgICB9XHJcbiAgICAgICAgYm9keSs9IGtleSsgJz0nICtmb3JtW2tleV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChCQVNFX0FQSV9VUkwgKyBwYXRoLCBib2R5LCBvcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAocmVzPT4gcmVzLmpzb24oKSkuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgfVxyXG5cclxuICBnZXREYXRhKHBhdGg6c3RyaW5nLCBwYXJhbXNNYXA6YW55KXtcclxuICAgIGxldCBwYXJhbXM6VVJMU2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xyXG4gICAgZm9yKCB2YXIga2V5IGluIHBhcmFtc01hcCkge1xyXG4gICAgICBpZihwYXJhbXNNYXAuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgIHBhcmFtcy5zZXQoa2V5LCBwYXJhbXNNYXBba2V5XSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKEJBU0VfQVBJX1VSTCArIHBhdGgpO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoQkFTRV9BUElfVVJMICsgcGF0aCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2g6IHBhcmFtc1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSkubWFwKHJlcyA9PiByZXMuanNvbigpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgfVxyXG5cclxuICBkZWxldGVEYXRhKHBhdGg6c3RyaW5nLCBwYXJhbXNNYXA6YW55KXtcclxuICAgIHZhciBvcHRpb25zID0gbmV3IFJlcXVlc3RPcHRpb25zKHtcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXNNYXApXHJcbiAgICAgIH0pO1xyXG4gICAgY29uc29sZS5sb2coQkFTRV9BUElfVVJMICsgcGF0aCk7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZShCQVNFX0FQSV9VUkwgKyBwYXRoLCBvcHRpb25zKS5tYXAocmVzID0+IHJlcy5qc29uKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCh0aGlzLmhhbmRsZUVycm9yKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogUmVzcG9uc2UpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yLmpzb24oKSB8fCAnU2VydmVyIGVycm9yJyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==