"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/http");
require("rxjs/add/operator/catch");
require("rxjs/add/operator/map");
require("rxjs/add/operator/toPromise");
require("rxjs/add/observable/throw");
var Observable_1 = require("rxjs/Observable");
var BASE_API_URL = 'https://donna-backend.herokuapp.com/api/';
var BaseAPIDataService = (function () {
    function BaseAPIDataService(http) {
        this.http = http;
    }
    BaseAPIDataService.prototype.postData = function (path, form) {
        var body = new FormData();
        for (var key in form) {
            if (form.hasOwnProperty(key)) {
                body.append(key, form[key]);
            }
        }
        return this.http.post(BASE_API_URL + path, body)
            .map(function (res) { return res.json(); }).catch(this.handleError);
    };
    BaseAPIDataService.prototype.getData = function (path, paramsMap) {
        var params = new http_1.URLSearchParams();
        for (var key in paramsMap) {
            if (paramsMap.hasOwnProperty(key)) {
                params.set(key, paramsMap[key]);
            }
        }
        console.log(BASE_API_URL + path);
        return this.http.get(BASE_API_URL + path, {
            search: params
        }).map(function (res) { return res.json(); })
            .catch(this.handleError);
    };
    BaseAPIDataService.prototype.deleteData = function (path, paramsMap) {
        var options = new http_1.RequestOptions({
            body: JSON.stringify(paramsMap)
        });
        console.log(BASE_API_URL + path);
        return this.http.delete(BASE_API_URL + path, options).map(function (res) { return res.json(); })
            .catch(this.handleError);
    };
    BaseAPIDataService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(error.json() || 'Server error');
    };
    return BaseAPIDataService;
}());
exports.BaseAPIDataService = BaseAPIDataService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1hcGktZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFzZS1hcGktZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esc0NBQThFO0FBQzlFLG1DQUFpQztBQUNqQyxpQ0FBK0I7QUFDL0IsdUNBQXFDO0FBQ3JDLHFDQUFtQztBQUNuQyw4Q0FBNkM7QUFFN0MsSUFBTSxZQUFZLEdBQVksMENBQTBDLENBQUM7QUFDekU7SUFFRSw0QkFBb0IsSUFBUztRQUFULFNBQUksR0FBSixJQUFJLENBQUs7SUFBSSxDQUFDO0lBRWxDLHFDQUFRLEdBQVIsVUFBUyxJQUFXLEVBQUUsSUFBUTtRQUM1QixJQUFJLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQzFCLEdBQUcsQ0FBQSxDQUFFLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDckIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzlCLENBQUM7UUFDSCxDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEVBQUUsSUFBSSxDQUFDO2FBQy9CLEdBQUcsQ0FBQyxVQUFBLEdBQUcsSUFBRyxPQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBVixDQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxvQ0FBTyxHQUFQLFVBQVEsSUFBVyxFQUFFLFNBQWE7UUFDaEMsSUFBSSxNQUFNLEdBQW1CLElBQUksc0JBQWUsRUFBRSxDQUFDO1FBQ25ELEdBQUcsQ0FBQSxDQUFFLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsRUFBRSxDQUFBLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLENBQUM7UUFDSCxDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxJQUFJLEVBQUU7WUFDdEIsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFWLENBQVUsQ0FBQzthQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCx1Q0FBVSxHQUFWLFVBQVcsSUFBVyxFQUFFLFNBQWE7UUFDbkMsSUFBSSxPQUFPLEdBQUcsSUFBSSxxQkFBYyxDQUFDO1lBQzdCLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztTQUNoQyxDQUFDLENBQUM7UUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQVYsQ0FBVSxDQUFDO2FBQ3ZELEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNPLHdDQUFXLEdBQW5CLFVBQW9CLEtBQWU7UUFDL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsdUJBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLGNBQWMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFDSCx5QkFBQztBQUFELENBQUMsQUF6Q0QsSUF5Q0M7QUF6Q1ksZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0h0dHAsIFVSTFNlYXJjaFBhcmFtcywgUmVzcG9uc2UsIFJlcXVlc3RPcHRpb25zfSBmcm9tICdAYW5ndWxhci9odHRwJztcclxuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9jYXRjaCc7XHJcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvbWFwJztcclxuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci90b1Byb21pc2UnO1xyXG5pbXBvcnQgJ3J4anMvYWRkL29ic2VydmFibGUvdGhyb3cnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuXHJcbmNvbnN0IEJBU0VfQVBJX1VSTCA6IHN0cmluZyA9ICdodHRwczovL2Rvbm5hLWJhY2tlbmQuaGVyb2t1YXBwLmNvbS9hcGkvJztcclxuZXhwb3J0IGNsYXNzIEJhc2VBUElEYXRhU2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDpIdHRwKSB7IH1cclxuXHJcbiAgcG9zdERhdGEocGF0aDpzdHJpbmcsIGZvcm06YW55KSB7XHJcbiAgICBsZXQgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgZm9yKCB2YXIga2V5IGluIGZvcm0pIHtcclxuICAgICAgaWYoZm9ybS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgYm9keS5hcHBlbmQoa2V5LCBmb3JtW2tleV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoQkFTRV9BUElfVVJMICsgcGF0aCwgYm9keSlcclxuICAgICAgICAgICAgICAgICAgICAubWFwKHJlcz0+IHJlcy5qc29uKCkpLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YShwYXRoOnN0cmluZywgcGFyYW1zTWFwOmFueSl7XHJcbiAgICBsZXQgcGFyYW1zOlVSTFNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcclxuICAgIGZvciggdmFyIGtleSBpbiBwYXJhbXNNYXApIHtcclxuICAgICAgaWYocGFyYW1zTWFwLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICBwYXJhbXMuc2V0KGtleSwgcGFyYW1zTWFwW2tleV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhCQVNFX0FQSV9VUkwgKyBwYXRoKTtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KEJBU0VfQVBJX1VSTCArIHBhdGgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoOiBwYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICAgIH0pLm1hcChyZXMgPT4gcmVzLmpzb24oKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlRGF0YShwYXRoOnN0cmluZywgcGFyYW1zTWFwOmFueSl7XHJcbiAgICB2YXIgb3B0aW9ucyA9IG5ldyBSZXF1ZXN0T3B0aW9ucyh7XHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zTWFwKVxyXG4gICAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKEJBU0VfQVBJX1VSTCArIHBhdGgpO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUoQkFTRV9BUElfVVJMICsgcGF0aCwgb3B0aW9ucykubWFwKHJlcyA9PiByZXMuanNvbigpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgfVxyXG4gIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IFJlc3BvbnNlKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvci5qc29uKCkgfHwgJ1NlcnZlciBlcnJvcicpO1xyXG4gIH1cclxufVxyXG4iXX0=