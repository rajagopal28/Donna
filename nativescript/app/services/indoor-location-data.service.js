"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var color_1 = require("tns-core-modules/color");
require("rxjs/Rx");
var nativescript_google_maps_sdk_1 = require("nativescript-google-maps-sdk");
var URL = 'https://maps.googleapis.com/maps/api/directions/json';
var DIRECTIONS_API_KEY = 'AIzaSyBAom4QZrTR7XbA6TdxLRpzDZMv5fhaaMg';
var IndoorLocationDataService = (function () {
    function IndoorLocationDataService(http) {
        this.http = http;
    }
    IndoorLocationDataService.prototype.getLevels = function () {
        return [-1, 0, 1, 2, 3, 7];
    };
    IndoorLocationDataService.prototype.getPolyLineFromWayPoints = function (waypoints) {
        var _this = this;
        var points = new Array();
        waypoints.forEach(function (point) {
            points.push(_this.getPolyLineForWayPoint(point));
        });
        return points;
    };
    IndoorLocationDataService.prototype.getPolyLineForWayPoint = function (waypoint) {
        return nativescript_google_maps_sdk_1.Position.positionFromLatLng(waypoint.lat, waypoint.lng);
    };
    IndoorLocationDataService.prototype.getDirectionWayPointsAndLoadPolyLineOptions = function (params, cb) {
        var _this = this;
        console.log('sending params to api...');
        params["key"] = DIRECTIONS_API_KEY;
        this.getDirectionWayPoints(params, function (response) {
            var routes = response.routes;
            if (routes && routes.length > 0) {
                console.log('got routes', routes.length);
                var decodedPathList = _this.decodePathLineString2(routes[0].overview_polyline.points);
                console.log('the polyline endoded str', routes[0].overview_polyline.points);
                console.log('decoded path list =', decodedPathList.length);
                var polyLineLocations = _this.getPolyLineFromWayPoints(decodedPathList);
                console.log('got locations from string=', polyLineLocations.length);
                // convert polyLineLocations to polyLine
                var polyLineOptions = _this.getPolylineOptionsFromPostions(polyLineLocations);
                console.log('received polyline options');
                cb(polyLineOptions);
            }
        });
    };
    IndoorLocationDataService.prototype.getPolylineOptionsFromPostions = function (polylinePositions) {
        var polyLineOptions = new nativescript_google_maps_sdk_1.Polyline();
        console.log('android enna??', polyLineOptions);
        console.log('creating polyling options, length=', polylinePositions.length);
        polyLineOptions.width = 25;
        polyLineOptions.visible = true;
        polyLineOptions.geodesic = true;
        polyLineOptions.color = new color_1.Color("#FF0000");
        polyLineOptions.addPoints(polylinePositions);
        return polyLineOptions;
    };
    IndoorLocationDataService.prototype.getRouteText = function (params, cb) {
        params["key"] = DIRECTIONS_API_KEY;
        this.getDirectionWayPoints(params, function (response) {
            var restext = '';
            if (response.routes && response.routes.length > 0) {
                var legsO = response.routes[0].legs;
                for (var leg = 0; leg < legsO.length; leg++) {
                    var legO = legsO[leg];
                    var steps = legO.steps;
                    for (var step = 0; step < steps.length; step++) {
                        restext += steps[step].html_instructions;
                    }
                }
            }
            cb(restext);
        });
    };
    IndoorLocationDataService.prototype.getDirectionWayPoints = function (params, cb) {
        this.getDirectionwayPointsAPI(params)
            .subscribe(function (result) {
            cb(result);
        }, function (error) {
            console.log("ERROR: ", error);
        });
    };
    IndoorLocationDataService.prototype.decodePathLineString2 = function (encoded) {
        if (!encoded) {
            return [];
        }
        var poly = [];
        var index = 0, len = encoded.length;
        var lat = 0, lng = 0;
        while (index < len) {
            var b, shift = 0, result = 0;
            do {
                b = encoded.charCodeAt(index++) - 63;
                result = result | ((b & 0x1f) << shift);
                shift += 5;
            } while (b >= 0x20);
            var dlat = (result & 1) != 0 ? ~(result >> 1) : (result >> 1);
            lat += dlat;
            shift = 0;
            result = 0;
            do {
                b = encoded.charCodeAt(index++) - 63;
                result = result | ((b & 0x1f) << shift);
                shift += 5;
            } while (b >= 0x20);
            var dlng = (result & 1) != 0 ? ~(result >> 1) : (result >> 1);
            lng += dlng;
            var p = {
                lat: lat / 1e5,
                lng: lng / 1e5,
            };
            console.log(JSON.stringify(p));
            poly.push(p);
        }
        return poly;
    };
    IndoorLocationDataService.prototype.decodePathLineString = function (encodedPath) {
        var len = encodedPath.length;
        var index = 0;
        var lat = 0;
        var lng = 0;
        // For speed we preallocate to an upper bound on the final length, then
        // truncate the array before returning.
        var path = [];
        while (index < len) {
            var result = 1;
            var shift = 0;
            var b;
            do {
                b = encodedPath.charAt(index++) - 63 - 1;
                result += b << shift;
                shift += 5;
            } while (b >= 0x1f);
            lat += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);
            result = 1;
            shift = 0;
            do {
                b = encodedPath.charAt(index++) - 63 - 1;
                result += b << shift;
                shift += 5;
            } while (b >= 0x1f);
            lng += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);
            path.push({ lat: lat * 1e-5, lng: lng * 1e-5 });
        }
        return path;
    };
    IndoorLocationDataService.prototype.getDirectionwayPointsAPI = function (params) {
        var paramString = this.getStringFromParams(params);
        return this.http.get(URL + paramString)
            .map(function (result) { return result.json(); });
    };
    IndoorLocationDataService.prototype.getStringFromParams = function (params) {
        var paramString = '?';
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                if (paramString !== '?') {
                    paramString += '&';
                }
                paramString += key + '=' + params[key];
            }
        }
        return paramString;
    };
    return IndoorLocationDataService;
}());
IndoorLocationDataService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], IndoorLocationDataService);
exports.IndoorLocationDataService = IndoorLocationDataService;
//# sourceMappingURL=data:application/json;base64,